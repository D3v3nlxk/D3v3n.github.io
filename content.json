{"meta":{"title":"D3v3n's Blog","subtitle":"","description":"","author":"D3v3n","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2024-04-11T08:10:17.000Z","updated":"2024-04-15T12:41:54.637Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"大二网络安全小菜鸡​ 从0开始的re和ai之旅"},{"title":"Music","date":"2024-04-15T14:47:31.000Z","updated":"2024-04-16T11:37:35.811Z","comments":true,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"中文歌 英文歌"},{"title":"分类","date":"2024-04-11T07:12:59.000Z","updated":"2024-04-11T07:14:02.230Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2024-04-11T07:43:09.000Z","updated":"2024-04-11T08:07:31.245Z","comments":true,"path":"link/index.html","permalink":"http://example.com/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2024-04-11T07:12:35.000Z","updated":"2024-04-11T07:15:03.514Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"第一章 感知机与神经网络","slug":"第一章 感知机","date":"2024-04-10T16:00:00.000Z","updated":"2024-04-19T08:23:20.888Z","comments":true,"path":"2024/04/11/第一章 感知机/","permalink":"http://example.com/2024/04/11/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%84%9F%E7%9F%A5%E6%9C%BA/","excerpt":"","text":"感知机一个感知机相当于数字电路里面的一个门电路，多层感知机实现完整电路，以下是与门、与非门和或门的基础实现代码以及原理。如果使用横坐标为$$x_1$$，纵坐标为$$x_2$$的数轴来表示，你会发现实际上是$$w_1x_1+w_2x_2+b&#x3D;0$$这条直线直线将两块区域划分开来，一部分为0，另一部分为1。$$y&#x3D;\\begin{cases}0, &amp;(b+w_1x_1+w_2x_2 \\leq 0)\\\\1, &amp;(b+w_1x_1+w_2x_2 &gt; 0)\\end{cases}$$其中$$b$$称为偏置,$$w_1$$和$$w_2$$称为权重。 12345678910111213141516171819202122232425262728293031323334353637383940import numpy as npdef AND(x1,x2): #与门的实现 x=np.array([x1,x2]) #输入 w=np.array([0.5,0.5]) #权重 b=-0.7 #偏置 tmp=np.sum(w*x)+b #判断 if tmp &lt;= 0: return 0 else: return 1 def NAND(x1,x2): #与非门的实现 x=np.array([x1,x2]) #输入 w=np.array([0.5,0.5]) #权重 b=0.7 #仅偏置与and不同 tmp=np.sum(w*x)+b #判断 if tmp &lt;= 0: return 0 else: return 1 def OR(x1,x2): #或门的实现 x=np.array([x1,x2]) #输入 w=np.array([0.5,0.5]) #权重 b=-0.2 #仅偏置与and不同 tmp=np.sum(w*x)+b #判断 if tmp &lt;= 0: return 0 else: return 1def XOR(x1,x2): s1=NAND(x1,x2) #通过与非门、或门、与门实现异或 s2=OR(X1,x2) y=AND(s1,s2) return yfor x in range(0,2): for y in range(0,2): print(XOR(x,y)) 神经网络基本概念神经网络构成：最左边输入层，中间所有部分统称为中间层（也称为隐藏层），右侧为输出层。e.g.上面提到的$$x_1$$和$$x_2$$为两个输入神经元（第0层），连接着中间的两个NAND和OR神经元（第1层），再连第二个中间层AND神经元（第2层），最后输出（第3层）。 激活函数将输入信号的总和转换为输出信号，类似中间层的处理函数，下面介绍几种常见的激活函数。 激活函数 阶跃函数$$y&#x3D;\\begin{cases}0, &amp;(x \\leq 0)\\\\1, &amp;(x &gt; 0)\\end{cases}$$ 代码实现： 123def stepfunction(x): y=x&gt;0 return y.astype(np.int64) Sigmoid函数 $$h(x)&#x3D;\\frac{1}{1+e^{-x}}$$ 代码实现： 12def sigmond(x): return 1/(1+np.exp(-x)) 观察函数图像可以发现，阶跃函数和sigmoid函数分别是曲线与折线，都属于非线性函数，而形如$$y&#x3D;ax$$的线性函数，在嵌套当中无法发挥更好的作用（$$y&#x3D;h(h(h(x))$$可以写成$$y&#x3D;a^3*x^3$$),激活函数都是非线性函数。 ReLU函数 $$h(x)&#x3D;\\begin{cases}0, &amp;(x \\leq 0)\\\\x, &amp;(x &gt; 0)\\end{cases}$$ 代码实现： 12def relu(x): return np.maximum(x,0) 神经网络的实现通过矩阵点乘的方式能够将输入根据权重计算到下一层，事项神经网络的向前推进","categories":[],"tags":[{"name":"AI","slug":"AI","permalink":"http://example.com/tags/AI/"}]},{"title":"我的第一篇博客文章","slug":"我的第一篇博客文章","date":"2024-03-29T12:06:24.000Z","updated":"2024-04-10T13:05:57.636Z","comments":true,"path":"2024/03/29/我的第一篇博客文章/","permalink":"http://example.com/2024/03/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","text":"​看到队里面的其他同学都开始使用自己的博客，我想想为了学习深度学习我也得弄个整理知识结构的地方出来，于是今天总算是做出来了","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2024-03-29T12:05:02.572Z","updated":"2024-03-29T12:05:02.572Z","comments":true,"path":"2024/03/29/hello-world/","permalink":"http://example.com/2024/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"AI","slug":"AI","permalink":"http://example.com/tags/AI/"}]}